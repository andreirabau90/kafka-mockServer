/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.tinkoff.sme.cryptobpm.responses;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SignResponseV2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3897290089279225341L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SignResponseV2\",\"namespace\":\"ru.tinkoff.sme.cryptobpm.responses\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Уникальный идентификатор запроса\"},{\"name\":\"system\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"success\",\"type\":\"boolean\"},{\"name\":\"error\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ErrorDescription\",\"fields\":[{\"name\":\"errorCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"errorMessage\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}]},{\"name\":\"signatures\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FileRef\",\"fields\":[{\"name\":\"fileId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SignResponseV2> ENCODER =
      new BinaryMessageEncoder<SignResponseV2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SignResponseV2> DECODER =
      new BinaryMessageDecoder<SignResponseV2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SignResponseV2> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SignResponseV2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SignResponseV2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SignResponseV2>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SignResponseV2 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SignResponseV2 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SignResponseV2 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SignResponseV2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Уникальный идентификатор запроса */
  @Deprecated public java.lang.String requestId;
  @Deprecated public java.lang.String system;
  @Deprecated public boolean success;
  @Deprecated public ru.tinkoff.sme.cryptobpm.responses.ErrorDescription error;
  @Deprecated public java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> signatures;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SignResponseV2() {}

  /**
   * All-args constructor.
   * @param requestId Уникальный идентификатор запроса
   * @param system The new value for system
   * @param success The new value for success
   * @param error The new value for error
   * @param signatures The new value for signatures
   */
  public SignResponseV2(java.lang.String requestId, java.lang.String system, java.lang.Boolean success, ru.tinkoff.sme.cryptobpm.responses.ErrorDescription error, java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> signatures) {
    this.requestId = requestId;
    this.system = system;
    this.success = success;
    this.error = error;
    this.signatures = signatures;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return system;
    case 2: return success;
    case 3: return error;
    case 4: return signatures;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: system = value$ != null ? value$.toString() : null; break;
    case 2: success = (java.lang.Boolean)value$; break;
    case 3: error = (ru.tinkoff.sme.cryptobpm.responses.ErrorDescription)value$; break;
    case 4: signatures = (java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Уникальный идентификатор запроса
   */
  public java.lang.String getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * Уникальный идентификатор запроса
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'system' field.
   * @return The value of the 'system' field.
   */
  public java.lang.String getSystem() {
    return system;
  }


  /**
   * Sets the value of the 'system' field.
   * @param value the value to set.
   */
  public void setSystem(java.lang.String value) {
    this.system = value;
  }

  /**
   * Gets the value of the 'success' field.
   * @return The value of the 'success' field.
   */
  public boolean getSuccess() {
    return success;
  }


  /**
   * Sets the value of the 'success' field.
   * @param value the value to set.
   */
  public void setSuccess(boolean value) {
    this.success = value;
  }

  /**
   * Gets the value of the 'error' field.
   * @return The value of the 'error' field.
   */
  public ru.tinkoff.sme.cryptobpm.responses.ErrorDescription getError() {
    return error;
  }


  /**
   * Sets the value of the 'error' field.
   * @param value the value to set.
   */
  public void setError(ru.tinkoff.sme.cryptobpm.responses.ErrorDescription value) {
    this.error = value;
  }

  /**
   * Gets the value of the 'signatures' field.
   * @return The value of the 'signatures' field.
   */
  public java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> getSignatures() {
    return signatures;
  }


  /**
   * Sets the value of the 'signatures' field.
   * @param value the value to set.
   */
  public void setSignatures(java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> value) {
    this.signatures = value;
  }

  /**
   * Creates a new SignResponseV2 RecordBuilder.
   * @return A new SignResponseV2 RecordBuilder
   */
  public static ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder newBuilder() {
    return new ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder();
  }

  /**
   * Creates a new SignResponseV2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SignResponseV2 RecordBuilder
   */
  public static ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder newBuilder(ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder other) {
    if (other == null) {
      return new ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder();
    } else {
      return new ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder(other);
    }
  }

  /**
   * Creates a new SignResponseV2 RecordBuilder by copying an existing SignResponseV2 instance.
   * @param other The existing instance to copy.
   * @return A new SignResponseV2 RecordBuilder
   */
  public static ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder newBuilder(ru.tinkoff.sme.cryptobpm.responses.SignResponseV2 other) {
    if (other == null) {
      return new ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder();
    } else {
      return new ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder(other);
    }
  }

  /**
   * RecordBuilder for SignResponseV2 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SignResponseV2>
    implements org.apache.avro.data.RecordBuilder<SignResponseV2> {

    /** Уникальный идентификатор запроса */
    private java.lang.String requestId;
    private java.lang.String system;
    private boolean success;
    private ru.tinkoff.sme.cryptobpm.responses.ErrorDescription error;
    private ru.tinkoff.sme.cryptobpm.responses.ErrorDescription.Builder errorBuilder;
    private java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> signatures;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.system)) {
        this.system = data().deepCopy(fields()[1].schema(), other.system);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.success)) {
        this.success = data().deepCopy(fields()[2].schema(), other.success);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.error)) {
        this.error = data().deepCopy(fields()[3].schema(), other.error);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasErrorBuilder()) {
        this.errorBuilder = ru.tinkoff.sme.cryptobpm.responses.ErrorDescription.newBuilder(other.getErrorBuilder());
      }
      if (isValidValue(fields()[4], other.signatures)) {
        this.signatures = data().deepCopy(fields()[4].schema(), other.signatures);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing SignResponseV2 instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.tinkoff.sme.cryptobpm.responses.SignResponseV2 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.system)) {
        this.system = data().deepCopy(fields()[1].schema(), other.system);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.success)) {
        this.success = data().deepCopy(fields()[2].schema(), other.success);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.error)) {
        this.error = data().deepCopy(fields()[3].schema(), other.error);
        fieldSetFlags()[3] = true;
      }
      this.errorBuilder = null;
      if (isValidValue(fields()[4], other.signatures)) {
        this.signatures = data().deepCopy(fields()[4].schema(), other.signatures);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Уникальный идентификатор запроса
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Уникальный идентификатор запроса
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Уникальный идентификатор запроса
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Уникальный идентификатор запроса
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'system' field.
      * @return The value.
      */
    public java.lang.String getSystem() {
      return system;
    }


    /**
      * Sets the value of the 'system' field.
      * @param value The value of 'system'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder setSystem(java.lang.String value) {
      validate(fields()[1], value);
      this.system = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'system' field has been set.
      * @return True if the 'system' field has been set, false otherwise.
      */
    public boolean hasSystem() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'system' field.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder clearSystem() {
      system = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'success' field.
      * @return The value.
      */
    public boolean getSuccess() {
      return success;
    }


    /**
      * Sets the value of the 'success' field.
      * @param value The value of 'success'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder setSuccess(boolean value) {
      validate(fields()[2], value);
      this.success = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'success' field has been set.
      * @return True if the 'success' field has been set, false otherwise.
      */
    public boolean hasSuccess() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'success' field.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder clearSuccess() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'error' field.
      * @return The value.
      */
    public ru.tinkoff.sme.cryptobpm.responses.ErrorDescription getError() {
      return error;
    }


    /**
      * Sets the value of the 'error' field.
      * @param value The value of 'error'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder setError(ru.tinkoff.sme.cryptobpm.responses.ErrorDescription value) {
      validate(fields()[3], value);
      this.errorBuilder = null;
      this.error = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'error' field has been set.
      * @return True if the 'error' field has been set, false otherwise.
      */
    public boolean hasError() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'error' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ru.tinkoff.sme.cryptobpm.responses.ErrorDescription.Builder getErrorBuilder() {
      if (errorBuilder == null) {
        if (hasError()) {
          setErrorBuilder(ru.tinkoff.sme.cryptobpm.responses.ErrorDescription.newBuilder(error));
        } else {
          setErrorBuilder(ru.tinkoff.sme.cryptobpm.responses.ErrorDescription.newBuilder());
        }
      }
      return errorBuilder;
    }

    /**
     * Sets the Builder instance for the 'error' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder setErrorBuilder(ru.tinkoff.sme.cryptobpm.responses.ErrorDescription.Builder value) {
      clearError();
      errorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'error' field has an active Builder instance
     * @return True if the 'error' field has an active Builder instance
     */
    public boolean hasErrorBuilder() {
      return errorBuilder != null;
    }

    /**
      * Clears the value of the 'error' field.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder clearError() {
      error = null;
      errorBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'signatures' field.
      * @return The value.
      */
    public java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> getSignatures() {
      return signatures;
    }


    /**
      * Sets the value of the 'signatures' field.
      * @param value The value of 'signatures'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder setSignatures(java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> value) {
      validate(fields()[4], value);
      this.signatures = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'signatures' field has been set.
      * @return True if the 'signatures' field has been set, false otherwise.
      */
    public boolean hasSignatures() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'signatures' field.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.responses.SignResponseV2.Builder clearSignatures() {
      signatures = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SignResponseV2 build() {
      try {
        SignResponseV2 record = new SignResponseV2();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.system = fieldSetFlags()[1] ? this.system : (java.lang.String) defaultValue(fields()[1]);
        record.success = fieldSetFlags()[2] ? this.success : (java.lang.Boolean) defaultValue(fields()[2]);
        if (errorBuilder != null) {
          try {
            record.error = this.errorBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("error"));
            throw e;
          }
        } else {
          record.error = fieldSetFlags()[3] ? this.error : (ru.tinkoff.sme.cryptobpm.responses.ErrorDescription) defaultValue(fields()[3]);
        }
        record.signatures = fieldSetFlags()[4] ? this.signatures : (java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SignResponseV2>
    WRITER$ = (org.apache.avro.io.DatumWriter<SignResponseV2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SignResponseV2>
    READER$ = (org.apache.avro.io.DatumReader<SignResponseV2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.requestId);

    out.writeString(this.system);

    out.writeBoolean(this.success);

    if (this.error == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.error.customEncode(out);
    }

    if (this.signatures == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.signatures.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (ru.tinkoff.sme.cryptobpm.responses.FileRef e0: this.signatures) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.requestId = in.readString();

      this.system = in.readString();

      this.success = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.error = null;
      } else {
        if (this.error == null) {
          this.error = new ru.tinkoff.sme.cryptobpm.responses.ErrorDescription();
        }
        this.error.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.signatures = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> a0 = this.signatures;
        if (a0 == null) {
          a0 = new SpecificData.Array<ru.tinkoff.sme.cryptobpm.responses.FileRef>((int)size0, SCHEMA$.getField("signatures").schema().getTypes().get(1));
          this.signatures = a0;
        } else a0.clear();
        SpecificData.Array<ru.tinkoff.sme.cryptobpm.responses.FileRef> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<ru.tinkoff.sme.cryptobpm.responses.FileRef>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            ru.tinkoff.sme.cryptobpm.responses.FileRef e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new ru.tinkoff.sme.cryptobpm.responses.FileRef();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.requestId = in.readString();
          break;

        case 1:
          this.system = in.readString();
          break;

        case 2:
          this.success = in.readBoolean();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.error = null;
          } else {
            if (this.error == null) {
              this.error = new ru.tinkoff.sme.cryptobpm.responses.ErrorDescription();
            }
            this.error.customDecode(in);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.signatures = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<ru.tinkoff.sme.cryptobpm.responses.FileRef> a0 = this.signatures;
            if (a0 == null) {
              a0 = new SpecificData.Array<ru.tinkoff.sme.cryptobpm.responses.FileRef>((int)size0, SCHEMA$.getField("signatures").schema().getTypes().get(1));
              this.signatures = a0;
            } else a0.clear();
            SpecificData.Array<ru.tinkoff.sme.cryptobpm.responses.FileRef> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<ru.tinkoff.sme.cryptobpm.responses.FileRef>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                ru.tinkoff.sme.cryptobpm.responses.FileRef e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new ru.tinkoff.sme.cryptobpm.responses.FileRef();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










