/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.tinkoff.sme.cryptobpm.requests;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SignRequestV2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5725405650644089012L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SignRequestV2\",\"namespace\":\"ru.tinkoff.sme.cryptobpm.requests\",\"fields\":[{\"name\":\"requestId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Уникальный идентификатор запроса\"},{\"name\":\"signer\",\"type\":[{\"type\":\"record\",\"name\":\"Individual\",\"fields\":[{\"name\":\"innFl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"snils\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]},{\"type\":\"record\",\"name\":\"Entrepreneur\",\"fields\":[{\"name\":\"innFl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ogrnip\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"snils\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]},{\"type\":\"record\",\"name\":\"Entity\",\"fields\":[{\"name\":\"innUl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ogrn\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"snils\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"doc\":\"Идентификаторы КЭПа подписанта\"},{\"name\":\"system\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Уникальный идентификатор бизнес-процесса или вызывающей системы\"},{\"name\":\"withoutConfirmation\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"selectStrategy\",\"type\":{\"type\":\"enum\",\"name\":\"SelectStrategy\",\"symbols\":[\"OLDEST_FIRST\",\"NEWEST_FIRST\"],\"default\":\"OLDEST_FIRST\"},\"doc\":\"Стратегия выбора сертификата при наличии нескольких действующих\"},{\"name\":\"rosreestrCompatible\",\"type\":\"boolean\",\"doc\":\"Требуется наличие OID-ов для Росреестра\",\"default\":false},{\"name\":\"useMyDssSdk\",\"type\":\"boolean\",\"doc\":\"Флаг для использования SDK\",\"default\":false},{\"name\":\"signatureType\",\"type\":{\"type\":\"enum\",\"name\":\"SignatureType\",\"symbols\":[\"BES_DETACHED\",\"BES_ENVELOPED\",\"CO_SIGN\",\"XML_ENVELOPED\"],\"default\":\"BES_DETACHED\"},\"doc\":\"Тип подписи\"},{\"name\":\"files\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FileRef\",\"fields\":[{\"name\":\"fileId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"signatureUri\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"meta\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FileMeta\",\"fields\":[{\"name\":\"fileName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null}]}},\"doc\":\"Список ссылок на файлы для подписи\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SignRequestV2> ENCODER =
      new BinaryMessageEncoder<SignRequestV2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SignRequestV2> DECODER =
      new BinaryMessageDecoder<SignRequestV2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SignRequestV2> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SignRequestV2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SignRequestV2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SignRequestV2>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SignRequestV2 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SignRequestV2 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SignRequestV2 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SignRequestV2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Уникальный идентификатор запроса */
  @Deprecated public java.lang.String requestId;
  /** Идентификаторы КЭПа подписанта */
  @Deprecated public java.lang.Object signer;
  /** Уникальный идентификатор бизнес-процесса или вызывающей системы */
  @Deprecated public java.lang.String system;
  @Deprecated public java.lang.Boolean withoutConfirmation;
  /** Стратегия выбора сертификата при наличии нескольких действующих */
  @Deprecated public ru.tinkoff.sme.cryptobpm.requests.SelectStrategy selectStrategy;
  /** Требуется наличие OID-ов для Росреестра */
  @Deprecated public boolean rosreestrCompatible;
  /** Флаг для использования SDK */
  @Deprecated public boolean useMyDssSdk;
  /** Тип подписи */
  @Deprecated public ru.tinkoff.sme.cryptobpm.requests.SignatureType signatureType;
  /** Список ссылок на файлы для подписи */
  @Deprecated public java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef> files;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SignRequestV2() {}

  /**
   * All-args constructor.
   * @param requestId Уникальный идентификатор запроса
   * @param signer Идентификаторы КЭПа подписанта
   * @param system Уникальный идентификатор бизнес-процесса или вызывающей системы
   * @param withoutConfirmation The new value for withoutConfirmation
   * @param selectStrategy Стратегия выбора сертификата при наличии нескольких действующих
   * @param rosreestrCompatible Требуется наличие OID-ов для Росреестра
   * @param useMyDssSdk Флаг для использования SDK
   * @param signatureType Тип подписи
   * @param files Список ссылок на файлы для подписи
   */
  public SignRequestV2(java.lang.String requestId, java.lang.Object signer, java.lang.String system, java.lang.Boolean withoutConfirmation, ru.tinkoff.sme.cryptobpm.requests.SelectStrategy selectStrategy, java.lang.Boolean rosreestrCompatible, java.lang.Boolean useMyDssSdk, ru.tinkoff.sme.cryptobpm.requests.SignatureType signatureType, java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef> files) {
    this.requestId = requestId;
    this.signer = signer;
    this.system = system;
    this.withoutConfirmation = withoutConfirmation;
    this.selectStrategy = selectStrategy;
    this.rosreestrCompatible = rosreestrCompatible;
    this.useMyDssSdk = useMyDssSdk;
    this.signatureType = signatureType;
    this.files = files;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return signer;
    case 2: return system;
    case 3: return withoutConfirmation;
    case 4: return selectStrategy;
    case 5: return rosreestrCompatible;
    case 6: return useMyDssSdk;
    case 7: return signatureType;
    case 8: return files;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = value$ != null ? value$.toString() : null; break;
    case 1: signer = value$; break;
    case 2: system = value$ != null ? value$.toString() : null; break;
    case 3: withoutConfirmation = (java.lang.Boolean)value$; break;
    case 4: selectStrategy = (ru.tinkoff.sme.cryptobpm.requests.SelectStrategy)value$; break;
    case 5: rosreestrCompatible = (java.lang.Boolean)value$; break;
    case 6: useMyDssSdk = (java.lang.Boolean)value$; break;
    case 7: signatureType = (ru.tinkoff.sme.cryptobpm.requests.SignatureType)value$; break;
    case 8: files = (java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Уникальный идентификатор запроса
   */
  public java.lang.String getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * Уникальный идентификатор запроса
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'signer' field.
   * @return Идентификаторы КЭПа подписанта
   */
  public java.lang.Object getSigner() {
    return signer;
  }


  /**
   * Sets the value of the 'signer' field.
   * Идентификаторы КЭПа подписанта
   * @param value the value to set.
   */
  public void setSigner(java.lang.Object value) {
    this.signer = value;
  }

  /**
   * Gets the value of the 'system' field.
   * @return Уникальный идентификатор бизнес-процесса или вызывающей системы
   */
  public java.lang.String getSystem() {
    return system;
  }


  /**
   * Sets the value of the 'system' field.
   * Уникальный идентификатор бизнес-процесса или вызывающей системы
   * @param value the value to set.
   */
  public void setSystem(java.lang.String value) {
    this.system = value;
  }

  /**
   * Gets the value of the 'withoutConfirmation' field.
   * @return The value of the 'withoutConfirmation' field.
   */
  public java.lang.Boolean getWithoutConfirmation() {
    return withoutConfirmation;
  }


  /**
   * Sets the value of the 'withoutConfirmation' field.
   * @param value the value to set.
   */
  public void setWithoutConfirmation(java.lang.Boolean value) {
    this.withoutConfirmation = value;
  }

  /**
   * Gets the value of the 'selectStrategy' field.
   * @return Стратегия выбора сертификата при наличии нескольких действующих
   */
  public ru.tinkoff.sme.cryptobpm.requests.SelectStrategy getSelectStrategy() {
    return selectStrategy;
  }


  /**
   * Sets the value of the 'selectStrategy' field.
   * Стратегия выбора сертификата при наличии нескольких действующих
   * @param value the value to set.
   */
  public void setSelectStrategy(ru.tinkoff.sme.cryptobpm.requests.SelectStrategy value) {
    this.selectStrategy = value;
  }

  /**
   * Gets the value of the 'rosreestrCompatible' field.
   * @return Требуется наличие OID-ов для Росреестра
   */
  public boolean getRosreestrCompatible() {
    return rosreestrCompatible;
  }


  /**
   * Sets the value of the 'rosreestrCompatible' field.
   * Требуется наличие OID-ов для Росреестра
   * @param value the value to set.
   */
  public void setRosreestrCompatible(boolean value) {
    this.rosreestrCompatible = value;
  }

  /**
   * Gets the value of the 'useMyDssSdk' field.
   * @return Флаг для использования SDK
   */
  public boolean getUseMyDssSdk() {
    return useMyDssSdk;
  }


  /**
   * Sets the value of the 'useMyDssSdk' field.
   * Флаг для использования SDK
   * @param value the value to set.
   */
  public void setUseMyDssSdk(boolean value) {
    this.useMyDssSdk = value;
  }

  /**
   * Gets the value of the 'signatureType' field.
   * @return Тип подписи
   */
  public ru.tinkoff.sme.cryptobpm.requests.SignatureType getSignatureType() {
    return signatureType;
  }


  /**
   * Sets the value of the 'signatureType' field.
   * Тип подписи
   * @param value the value to set.
   */
  public void setSignatureType(ru.tinkoff.sme.cryptobpm.requests.SignatureType value) {
    this.signatureType = value;
  }

  /**
   * Gets the value of the 'files' field.
   * @return Список ссылок на файлы для подписи
   */
  public java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef> getFiles() {
    return files;
  }


  /**
   * Sets the value of the 'files' field.
   * Список ссылок на файлы для подписи
   * @param value the value to set.
   */
  public void setFiles(java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef> value) {
    this.files = value;
  }

  /**
   * Creates a new SignRequestV2 RecordBuilder.
   * @return A new SignRequestV2 RecordBuilder
   */
  public static ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder newBuilder() {
    return new ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder();
  }

  /**
   * Creates a new SignRequestV2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SignRequestV2 RecordBuilder
   */
  public static ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder newBuilder(ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder other) {
    if (other == null) {
      return new ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder();
    } else {
      return new ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder(other);
    }
  }

  /**
   * Creates a new SignRequestV2 RecordBuilder by copying an existing SignRequestV2 instance.
   * @param other The existing instance to copy.
   * @return A new SignRequestV2 RecordBuilder
   */
  public static ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder newBuilder(ru.tinkoff.sme.cryptobpm.requests.SignRequestV2 other) {
    if (other == null) {
      return new ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder();
    } else {
      return new ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder(other);
    }
  }

  /**
   * RecordBuilder for SignRequestV2 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SignRequestV2>
    implements org.apache.avro.data.RecordBuilder<SignRequestV2> {

    /** Уникальный идентификатор запроса */
    private java.lang.String requestId;
    /** Идентификаторы КЭПа подписанта */
    private java.lang.Object signer;
    /** Уникальный идентификатор бизнес-процесса или вызывающей системы */
    private java.lang.String system;
    private java.lang.Boolean withoutConfirmation;
    /** Стратегия выбора сертификата при наличии нескольких действующих */
    private ru.tinkoff.sme.cryptobpm.requests.SelectStrategy selectStrategy;
    /** Требуется наличие OID-ов для Росреестра */
    private boolean rosreestrCompatible;
    /** Флаг для использования SDK */
    private boolean useMyDssSdk;
    /** Тип подписи */
    private ru.tinkoff.sme.cryptobpm.requests.SignatureType signatureType;
    /** Список ссылок на файлы для подписи */
    private java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef> files;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.signer)) {
        this.signer = data().deepCopy(fields()[1].schema(), other.signer);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.system)) {
        this.system = data().deepCopy(fields()[2].schema(), other.system);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.withoutConfirmation)) {
        this.withoutConfirmation = data().deepCopy(fields()[3].schema(), other.withoutConfirmation);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.selectStrategy)) {
        this.selectStrategy = data().deepCopy(fields()[4].schema(), other.selectStrategy);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.rosreestrCompatible)) {
        this.rosreestrCompatible = data().deepCopy(fields()[5].schema(), other.rosreestrCompatible);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.useMyDssSdk)) {
        this.useMyDssSdk = data().deepCopy(fields()[6].schema(), other.useMyDssSdk);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.signatureType)) {
        this.signatureType = data().deepCopy(fields()[7].schema(), other.signatureType);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.files)) {
        this.files = data().deepCopy(fields()[8].schema(), other.files);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing SignRequestV2 instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.tinkoff.sme.cryptobpm.requests.SignRequestV2 other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.signer)) {
        this.signer = data().deepCopy(fields()[1].schema(), other.signer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.system)) {
        this.system = data().deepCopy(fields()[2].schema(), other.system);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.withoutConfirmation)) {
        this.withoutConfirmation = data().deepCopy(fields()[3].schema(), other.withoutConfirmation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.selectStrategy)) {
        this.selectStrategy = data().deepCopy(fields()[4].schema(), other.selectStrategy);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rosreestrCompatible)) {
        this.rosreestrCompatible = data().deepCopy(fields()[5].schema(), other.rosreestrCompatible);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.useMyDssSdk)) {
        this.useMyDssSdk = data().deepCopy(fields()[6].schema(), other.useMyDssSdk);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.signatureType)) {
        this.signatureType = data().deepCopy(fields()[7].schema(), other.signatureType);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.files)) {
        this.files = data().deepCopy(fields()[8].schema(), other.files);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Уникальный идентификатор запроса
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Уникальный идентификатор запроса
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Уникальный идентификатор запроса
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Уникальный идентификатор запроса
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'signer' field.
      * Идентификаторы КЭПа подписанта
      * @return The value.
      */
    public java.lang.Object getSigner() {
      return signer;
    }


    /**
      * Sets the value of the 'signer' field.
      * Идентификаторы КЭПа подписанта
      * @param value The value of 'signer'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setSigner(java.lang.Object value) {
      validate(fields()[1], value);
      this.signer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'signer' field has been set.
      * Идентификаторы КЭПа подписанта
      * @return True if the 'signer' field has been set, false otherwise.
      */
    public boolean hasSigner() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'signer' field.
      * Идентификаторы КЭПа подписанта
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearSigner() {
      signer = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'system' field.
      * Уникальный идентификатор бизнес-процесса или вызывающей системы
      * @return The value.
      */
    public java.lang.String getSystem() {
      return system;
    }


    /**
      * Sets the value of the 'system' field.
      * Уникальный идентификатор бизнес-процесса или вызывающей системы
      * @param value The value of 'system'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setSystem(java.lang.String value) {
      validate(fields()[2], value);
      this.system = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'system' field has been set.
      * Уникальный идентификатор бизнес-процесса или вызывающей системы
      * @return True if the 'system' field has been set, false otherwise.
      */
    public boolean hasSystem() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'system' field.
      * Уникальный идентификатор бизнес-процесса или вызывающей системы
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearSystem() {
      system = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'withoutConfirmation' field.
      * @return The value.
      */
    public java.lang.Boolean getWithoutConfirmation() {
      return withoutConfirmation;
    }


    /**
      * Sets the value of the 'withoutConfirmation' field.
      * @param value The value of 'withoutConfirmation'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setWithoutConfirmation(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.withoutConfirmation = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'withoutConfirmation' field has been set.
      * @return True if the 'withoutConfirmation' field has been set, false otherwise.
      */
    public boolean hasWithoutConfirmation() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'withoutConfirmation' field.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearWithoutConfirmation() {
      withoutConfirmation = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'selectStrategy' field.
      * Стратегия выбора сертификата при наличии нескольких действующих
      * @return The value.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SelectStrategy getSelectStrategy() {
      return selectStrategy;
    }


    /**
      * Sets the value of the 'selectStrategy' field.
      * Стратегия выбора сертификата при наличии нескольких действующих
      * @param value The value of 'selectStrategy'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setSelectStrategy(ru.tinkoff.sme.cryptobpm.requests.SelectStrategy value) {
      validate(fields()[4], value);
      this.selectStrategy = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'selectStrategy' field has been set.
      * Стратегия выбора сертификата при наличии нескольких действующих
      * @return True if the 'selectStrategy' field has been set, false otherwise.
      */
    public boolean hasSelectStrategy() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'selectStrategy' field.
      * Стратегия выбора сертификата при наличии нескольких действующих
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearSelectStrategy() {
      selectStrategy = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'rosreestrCompatible' field.
      * Требуется наличие OID-ов для Росреестра
      * @return The value.
      */
    public boolean getRosreestrCompatible() {
      return rosreestrCompatible;
    }


    /**
      * Sets the value of the 'rosreestrCompatible' field.
      * Требуется наличие OID-ов для Росреестра
      * @param value The value of 'rosreestrCompatible'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setRosreestrCompatible(boolean value) {
      validate(fields()[5], value);
      this.rosreestrCompatible = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'rosreestrCompatible' field has been set.
      * Требуется наличие OID-ов для Росреестра
      * @return True if the 'rosreestrCompatible' field has been set, false otherwise.
      */
    public boolean hasRosreestrCompatible() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'rosreestrCompatible' field.
      * Требуется наличие OID-ов для Росреестра
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearRosreestrCompatible() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'useMyDssSdk' field.
      * Флаг для использования SDK
      * @return The value.
      */
    public boolean getUseMyDssSdk() {
      return useMyDssSdk;
    }


    /**
      * Sets the value of the 'useMyDssSdk' field.
      * Флаг для использования SDK
      * @param value The value of 'useMyDssSdk'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setUseMyDssSdk(boolean value) {
      validate(fields()[6], value);
      this.useMyDssSdk = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'useMyDssSdk' field has been set.
      * Флаг для использования SDK
      * @return True if the 'useMyDssSdk' field has been set, false otherwise.
      */
    public boolean hasUseMyDssSdk() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'useMyDssSdk' field.
      * Флаг для использования SDK
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearUseMyDssSdk() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'signatureType' field.
      * Тип подписи
      * @return The value.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignatureType getSignatureType() {
      return signatureType;
    }


    /**
      * Sets the value of the 'signatureType' field.
      * Тип подписи
      * @param value The value of 'signatureType'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setSignatureType(ru.tinkoff.sme.cryptobpm.requests.SignatureType value) {
      validate(fields()[7], value);
      this.signatureType = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'signatureType' field has been set.
      * Тип подписи
      * @return True if the 'signatureType' field has been set, false otherwise.
      */
    public boolean hasSignatureType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'signatureType' field.
      * Тип подписи
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearSignatureType() {
      signatureType = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'files' field.
      * Список ссылок на файлы для подписи
      * @return The value.
      */
    public java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef> getFiles() {
      return files;
    }


    /**
      * Sets the value of the 'files' field.
      * Список ссылок на файлы для подписи
      * @param value The value of 'files'.
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder setFiles(java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef> value) {
      validate(fields()[8], value);
      this.files = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'files' field has been set.
      * Список ссылок на файлы для подписи
      * @return True if the 'files' field has been set, false otherwise.
      */
    public boolean hasFiles() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'files' field.
      * Список ссылок на файлы для подписи
      * @return This builder.
      */
    public ru.tinkoff.sme.cryptobpm.requests.SignRequestV2.Builder clearFiles() {
      files = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SignRequestV2 build() {
      try {
        SignRequestV2 record = new SignRequestV2();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.String) defaultValue(fields()[0]);
        record.signer = fieldSetFlags()[1] ? this.signer :  defaultValue(fields()[1]);
        record.system = fieldSetFlags()[2] ? this.system : (java.lang.String) defaultValue(fields()[2]);
        record.withoutConfirmation = fieldSetFlags()[3] ? this.withoutConfirmation : (java.lang.Boolean) defaultValue(fields()[3]);
        record.selectStrategy = fieldSetFlags()[4] ? this.selectStrategy : (ru.tinkoff.sme.cryptobpm.requests.SelectStrategy) defaultValue(fields()[4]);
        record.rosreestrCompatible = fieldSetFlags()[5] ? this.rosreestrCompatible : (java.lang.Boolean) defaultValue(fields()[5]);
        record.useMyDssSdk = fieldSetFlags()[6] ? this.useMyDssSdk : (java.lang.Boolean) defaultValue(fields()[6]);
        record.signatureType = fieldSetFlags()[7] ? this.signatureType : (ru.tinkoff.sme.cryptobpm.requests.SignatureType) defaultValue(fields()[7]);
        record.files = fieldSetFlags()[8] ? this.files : (java.util.List<ru.tinkoff.sme.cryptobpm.requests.FileRef>) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SignRequestV2>
    WRITER$ = (org.apache.avro.io.DatumWriter<SignRequestV2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SignRequestV2>
    READER$ = (org.apache.avro.io.DatumReader<SignRequestV2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










