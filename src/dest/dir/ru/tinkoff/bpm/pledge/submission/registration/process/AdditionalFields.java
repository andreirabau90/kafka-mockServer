/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.tinkoff.bpm.pledge.submission.registration.process;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AdditionalFields extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3310012438490503210L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AdditionalFields\",\"namespace\":\"ru.tinkoff.bpm.pledge.submission.registration.process\",\"fields\":[{\"name\":\"kuvd\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sendDate\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"local-timestamp-millis\"},{\"name\":\"mortgageRegDate\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"local-timestamp-millis\"},{\"name\":\"mortgageRegNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AdditionalFields> ENCODER =
      new BinaryMessageEncoder<AdditionalFields>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AdditionalFields> DECODER =
      new BinaryMessageDecoder<AdditionalFields>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AdditionalFields> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AdditionalFields> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AdditionalFields> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AdditionalFields>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AdditionalFields to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AdditionalFields from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AdditionalFields instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AdditionalFields fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String kuvd;
  @Deprecated public java.lang.Long sendDate;
  @Deprecated public java.lang.Long mortgageRegDate;
  @Deprecated public java.lang.String mortgageRegNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AdditionalFields() {}

  /**
   * All-args constructor.
   * @param kuvd The new value for kuvd
   * @param sendDate The new value for sendDate
   * @param mortgageRegDate The new value for mortgageRegDate
   * @param mortgageRegNumber The new value for mortgageRegNumber
   */
  public AdditionalFields(java.lang.String kuvd, java.lang.Long sendDate, java.lang.Long mortgageRegDate, java.lang.String mortgageRegNumber) {
    this.kuvd = kuvd;
    this.sendDate = sendDate;
    this.mortgageRegDate = mortgageRegDate;
    this.mortgageRegNumber = mortgageRegNumber;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return kuvd;
    case 1: return sendDate;
    case 2: return mortgageRegDate;
    case 3: return mortgageRegNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: kuvd = value$ != null ? value$.toString() : null; break;
    case 1: sendDate = (java.lang.Long)value$; break;
    case 2: mortgageRegDate = (java.lang.Long)value$; break;
    case 3: mortgageRegNumber = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'kuvd' field.
   * @return The value of the 'kuvd' field.
   */
  public java.lang.String getKuvd() {
    return kuvd;
  }


  /**
   * Sets the value of the 'kuvd' field.
   * @param value the value to set.
   */
  public void setKuvd(java.lang.String value) {
    this.kuvd = value;
  }

  /**
   * Gets the value of the 'sendDate' field.
   * @return The value of the 'sendDate' field.
   */
  public java.lang.Long getSendDate() {
    return sendDate;
  }


  /**
   * Sets the value of the 'sendDate' field.
   * @param value the value to set.
   */
  public void setSendDate(java.lang.Long value) {
    this.sendDate = value;
  }

  /**
   * Gets the value of the 'mortgageRegDate' field.
   * @return The value of the 'mortgageRegDate' field.
   */
  public java.lang.Long getMortgageRegDate() {
    return mortgageRegDate;
  }


  /**
   * Sets the value of the 'mortgageRegDate' field.
   * @param value the value to set.
   */
  public void setMortgageRegDate(java.lang.Long value) {
    this.mortgageRegDate = value;
  }

  /**
   * Gets the value of the 'mortgageRegNumber' field.
   * @return The value of the 'mortgageRegNumber' field.
   */
  public java.lang.String getMortgageRegNumber() {
    return mortgageRegNumber;
  }


  /**
   * Sets the value of the 'mortgageRegNumber' field.
   * @param value the value to set.
   */
  public void setMortgageRegNumber(java.lang.String value) {
    this.mortgageRegNumber = value;
  }

  /**
   * Creates a new AdditionalFields RecordBuilder.
   * @return A new AdditionalFields RecordBuilder
   */
  public static ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder newBuilder() {
    return new ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder();
  }

  /**
   * Creates a new AdditionalFields RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AdditionalFields RecordBuilder
   */
  public static ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder newBuilder(ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder other) {
    if (other == null) {
      return new ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder();
    } else {
      return new ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder(other);
    }
  }

  /**
   * Creates a new AdditionalFields RecordBuilder by copying an existing AdditionalFields instance.
   * @param other The existing instance to copy.
   * @return A new AdditionalFields RecordBuilder
   */
  public static ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder newBuilder(ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields other) {
    if (other == null) {
      return new ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder();
    } else {
      return new ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder(other);
    }
  }

  /**
   * RecordBuilder for AdditionalFields instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AdditionalFields>
    implements org.apache.avro.data.RecordBuilder<AdditionalFields> {

    private java.lang.String kuvd;
    private java.lang.Long sendDate;
    private java.lang.Long mortgageRegDate;
    private java.lang.String mortgageRegNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.kuvd)) {
        this.kuvd = data().deepCopy(fields()[0].schema(), other.kuvd);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sendDate)) {
        this.sendDate = data().deepCopy(fields()[1].schema(), other.sendDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mortgageRegDate)) {
        this.mortgageRegDate = data().deepCopy(fields()[2].schema(), other.mortgageRegDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.mortgageRegNumber)) {
        this.mortgageRegNumber = data().deepCopy(fields()[3].schema(), other.mortgageRegNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AdditionalFields instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.kuvd)) {
        this.kuvd = data().deepCopy(fields()[0].schema(), other.kuvd);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sendDate)) {
        this.sendDate = data().deepCopy(fields()[1].schema(), other.sendDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mortgageRegDate)) {
        this.mortgageRegDate = data().deepCopy(fields()[2].schema(), other.mortgageRegDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mortgageRegNumber)) {
        this.mortgageRegNumber = data().deepCopy(fields()[3].schema(), other.mortgageRegNumber);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'kuvd' field.
      * @return The value.
      */
    public java.lang.String getKuvd() {
      return kuvd;
    }


    /**
      * Sets the value of the 'kuvd' field.
      * @param value The value of 'kuvd'.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder setKuvd(java.lang.String value) {
      validate(fields()[0], value);
      this.kuvd = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'kuvd' field has been set.
      * @return True if the 'kuvd' field has been set, false otherwise.
      */
    public boolean hasKuvd() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'kuvd' field.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder clearKuvd() {
      kuvd = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sendDate' field.
      * @return The value.
      */
    public java.lang.Long getSendDate() {
      return sendDate;
    }


    /**
      * Sets the value of the 'sendDate' field.
      * @param value The value of 'sendDate'.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder setSendDate(java.lang.Long value) {
      validate(fields()[1], value);
      this.sendDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sendDate' field has been set.
      * @return True if the 'sendDate' field has been set, false otherwise.
      */
    public boolean hasSendDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sendDate' field.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder clearSendDate() {
      sendDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mortgageRegDate' field.
      * @return The value.
      */
    public java.lang.Long getMortgageRegDate() {
      return mortgageRegDate;
    }


    /**
      * Sets the value of the 'mortgageRegDate' field.
      * @param value The value of 'mortgageRegDate'.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder setMortgageRegDate(java.lang.Long value) {
      validate(fields()[2], value);
      this.mortgageRegDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mortgageRegDate' field has been set.
      * @return True if the 'mortgageRegDate' field has been set, false otherwise.
      */
    public boolean hasMortgageRegDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mortgageRegDate' field.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder clearMortgageRegDate() {
      mortgageRegDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mortgageRegNumber' field.
      * @return The value.
      */
    public java.lang.String getMortgageRegNumber() {
      return mortgageRegNumber;
    }


    /**
      * Sets the value of the 'mortgageRegNumber' field.
      * @param value The value of 'mortgageRegNumber'.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder setMortgageRegNumber(java.lang.String value) {
      validate(fields()[3], value);
      this.mortgageRegNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mortgageRegNumber' field has been set.
      * @return True if the 'mortgageRegNumber' field has been set, false otherwise.
      */
    public boolean hasMortgageRegNumber() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mortgageRegNumber' field.
      * @return This builder.
      */
    public ru.tinkoff.bpm.pledge.submission.registration.process.AdditionalFields.Builder clearMortgageRegNumber() {
      mortgageRegNumber = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AdditionalFields build() {
      try {
        AdditionalFields record = new AdditionalFields();
        record.kuvd = fieldSetFlags()[0] ? this.kuvd : (java.lang.String) defaultValue(fields()[0]);
        record.sendDate = fieldSetFlags()[1] ? this.sendDate : (java.lang.Long) defaultValue(fields()[1]);
        record.mortgageRegDate = fieldSetFlags()[2] ? this.mortgageRegDate : (java.lang.Long) defaultValue(fields()[2]);
        record.mortgageRegNumber = fieldSetFlags()[3] ? this.mortgageRegNumber : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AdditionalFields>
    WRITER$ = (org.apache.avro.io.DatumWriter<AdditionalFields>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AdditionalFields>
    READER$ = (org.apache.avro.io.DatumReader<AdditionalFields>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.kuvd == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.kuvd);
    }

    if (this.sendDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.sendDate);
    }

    if (this.mortgageRegDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.mortgageRegDate);
    }

    if (this.mortgageRegNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mortgageRegNumber);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.kuvd = null;
      } else {
        this.kuvd = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sendDate = null;
      } else {
        this.sendDate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mortgageRegDate = null;
      } else {
        this.mortgageRegDate = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mortgageRegNumber = null;
      } else {
        this.mortgageRegNumber = in.readString();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.kuvd = null;
          } else {
            this.kuvd = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sendDate = null;
          } else {
            this.sendDate = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mortgageRegDate = null;
          } else {
            this.mortgageRegDate = in.readLong();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mortgageRegNumber = null;
          } else {
            this.mortgageRegNumber = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










